diff --git a/node_modules/@parcel/css/node/index.d.ts b/node_modules/@parcel/css/node/index.d.ts
index 6ff4d5f..a64e761 100644
--- a/node_modules/@parcel/css/node/index.d.ts
+++ b/node_modules/@parcel/css/node/index.d.ts
@@ -56,11 +56,11 @@ export interface TransformResult {
   /** The transformed code. */
   code: Buffer,
   /** The generated source map, if enabled. */
-  map: Buffer | void,
+  map: Buffer | undefined,
   /** CSS module exports, if enabled. */
-  exports: CSSModuleExports | void,
+  exports: CSSModuleExports | undefined,
   /** `@import` and `url()` dependencies, if enabled. */
-  dependencies: Dependency[] | void
+  dependencies: Dependency[] | undefined
 }
 
 export type CSSModuleExports = {
@@ -143,8 +143,18 @@ export interface Location {
  * Compiles a CSS file, including optionally minifying and lowering syntax to the given
  * targets. A source map may also be generated, but this is not enabled by default.
  */
+export declare function transform(options: WithFlag<TransformOptions, "sourceMap" | "cssModules" | "analyzeDependencies">): NonNullableTransformResult<"map" |  "exports" |"dependencies">;
+export declare function transform(options: WithFlag<TransformOptions, "sourceMap" | "analyzeDependencies">): NonNullableTransformResult<"map" |"dependencies">;
+export declare function transform(options: WithFlag<TransformOptions, "sourceMap" | "cssModules">): NonNullableTransformResult<"map" |"exports">;
+export declare function transform(options: WithFlag<TransformOptions, "cssModules" | "analyzeDependencies">): NonNullableTransformResult<"exports" |"dependencies">;
+export declare function transform(options: WithFlag<TransformOptions, "sourceMap">): NonNullableTransformResult<"map">;
+export declare function transform(options: WithFlag<TransformOptions, "cssModules">): NonNullableTransformResult<"exports">;
+export declare function transform(options: WithFlag<TransformOptions, "analyzeDependencies">): NonNullableTransformResult<"dependencies">;
 export declare function transform(options: TransformOptions): TransformResult;
 
+type WithFlag<Options, Key extends keyof Options> = Options & { [key in Key]: true }
+type NonNullableTransformResult<Key extends keyof TransformResult> = TransformResult & { [key in Key]: Exclude<TransformResult[key], undefined> }
+
 export interface TransformAttributeOptions {
   /** The source code to transform. */
   code: Buffer,
